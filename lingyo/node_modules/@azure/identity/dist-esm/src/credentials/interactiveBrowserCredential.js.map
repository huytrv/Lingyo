{"version":3,"file":"interactiveBrowserCredential.js","sourceRoot":"","sources":["../../../src/credentials/interactiveBrowserCredential.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { TokenCredential, GetTokenOptions, AccessToken } from \"@azure/core-http\";\nimport { InteractiveBrowserCredentialOptions } from \"./interactiveBrowserCredentialOptions\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { DefaultTenantId, DeveloperSignOnClientId } from \"../constants\";\nimport { Socket } from \"net\";\nimport { AuthenticationRequired, MsalClient } from \"../client/msalClient\";\nimport { AuthorizationCodeRequest } from \"@azure/msal-node\";\n\nimport express from \"express\";\nimport open from \"open\";\nimport http from \"http\";\nimport { checkTenantId } from \"../util/checkTenantId\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow, either via browser redirects or a popup\n * window.  This credential is not currently supported in Node.js.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private redirectUri: string;\n  private port: number;\n  private msalClient: MsalClient;\n\n  constructor(options?: InteractiveBrowserCredentialOptions) {\n    const tenantId = (options && options.tenantId) || DefaultTenantId;\n    const clientId = (options && options.clientId) || DeveloperSignOnClientId;\n\n    checkTenantId(logger, tenantId);\n\n    // const persistenceEnabled = options?.persistenceEnabled ? options?.persistenceEnabled : false;\n    // const authenticationRecord = options?.authenticationRecord;\n\n    if (options && options.redirectUri) {\n      if (typeof options.redirectUri === \"string\") {\n        this.redirectUri = options.redirectUri;\n      } else {\n        this.redirectUri = options.redirectUri();\n      }\n    } else {\n      this.redirectUri = \"http://localhost\";\n    }\n\n    const url = new URL(this.redirectUri);\n    this.port = parseInt(url.port);\n    if (isNaN(this.port)) {\n      this.port = 80;\n    }\n\n    let authorityHost;\n    if (options && options.authorityHost) {\n      if (options.authorityHost.endsWith(\"/\")) {\n        authorityHost = options.authorityHost + tenantId;\n      } else {\n        authorityHost = options.authorityHost + \"/\" + tenantId;\n      }\n    } else {\n      authorityHost = \"https://login.microsoftonline.com/\" + tenantId;\n    }\n\n    this.msalClient = new MsalClient(\n      { clientId, authority: authorityHost },\n      false,\n      undefined,\n      options\n    );\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes The list of scopes for which the token will have access.\n   * @param options The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public getToken(\n    scopes: string | string[],\n    _options?: GetTokenOptions\n  ): Promise<AccessToken | null> {\n    const scopeArray = typeof scopes === \"object\" ? scopes : [scopes];\n\n    return this.msalClient.acquireTokenFromCache(scopeArray).catch((e) => {\n      if (e instanceof AuthenticationRequired) {\n        return this.acquireTokenFromBrowser(scopeArray);\n      } else {\n        logger.getToken.info(formatError(scopes, e));\n        throw e;\n      }\n    });\n  }\n\n  private async openAuthCodeUrl(scopeArray: string[]): Promise<void> {\n    const authCodeUrlParameters = {\n      scopes: scopeArray,\n      redirectUri: this.redirectUri\n    };\n\n    const response = await this.msalClient.getAuthCodeUrl(authCodeUrlParameters);\n    await open(response);\n  }\n\n  private async acquireTokenFromBrowser(scopeArray: string[]): Promise<AccessToken | null> {\n    // eslint-disable-next-line\n    return new Promise<AccessToken | null>(async (resolve, reject) => {\n      // eslint-disable-next-line\n      let listen: http.Server | undefined;\n      let socketToDestroy: Socket | undefined;\n\n      function cleanup(): void {\n        if (listen) {\n          listen.close();\n        }\n        if (socketToDestroy) {\n          socketToDestroy.destroy();\n        }\n      }\n\n      // Create Express App and Routes\n      const app = express();\n\n      app.get(\"/\", async (req, res) => {\n        const tokenRequest: AuthorizationCodeRequest = {\n          code: req.query.code as string,\n          redirectUri: this.redirectUri,\n          scopes: scopeArray\n        };\n\n        try {\n          const authResponse = await this.msalClient.acquireTokenByCode(tokenRequest);\n          const successMessage = `Authentication Complete. You can close the browser and return to the application.`;\n          const expiresOnTimestamp = authResponse?.expiresOn.valueOf();\n          res.status(200).send(successMessage);\n          logger.getToken.info(formatSuccess(scopeArray));\n\n          resolve({\n            expiresOnTimestamp,\n            token: authResponse.accessToken\n          });\n        } catch (error) {\n          const errorMessage = formatError(\n            scopeArray,\n            `${req.query[\"error\"]}. ${req.query[\"error_description\"]}`\n          );\n          res.status(500).send(errorMessage);\n          logger.getToken.info(errorMessage);\n          reject(new Error(errorMessage));\n        } finally {\n          cleanup();\n        }\n      });\n\n      listen = app.listen(this.port, () =>\n        logger.info(`Msal Node Auth Code Sample app listening on port ${this.port}!`)\n      );\n      listen.on(\"connection\", (socket) => (socketToDestroy = socket));\n\n      try {\n        await this.openAuthCodeUrl(scopeArray);\n      } catch (e) {\n        cleanup();\n        throw e;\n      }\n    });\n  }\n}\n"]}